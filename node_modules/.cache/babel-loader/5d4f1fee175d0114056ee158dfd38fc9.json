{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0423\\u043D\\u0438\\u0432\\u0435\\u0440\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\\\u0410\\u0422\\u0410\\u0420\\u041A\\\\Front\\\\src\\\\components\\\\Quests\\\\Quest.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppBar, Container, Toolbar, IconButton, Typography, Paper, Box, Grid, Card, CardMedia, CardContent, CardActions } from '@material-ui/core';\nimport { useTranslation } from \"react-i18next\";\nimport \"../../utils/i18next\";\nimport routes from \"../../utils/i18next\";\nimport Booking from \"../OnlineBooking/Booking\";\nimport { useHistory } from 'react-router-dom'; // import { Table } from 'reactstrap';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  title: {\n    flexGrow: 1\n  },\n  mainFeaturePost: {\n    position: \"relative\",\n    color: theme.palette.common.white,\n    marginBottom: theme.spacing(4),\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\"\n  },\n  mainFeaturePostContent: {\n    position: \"relative\",\n    padding: theme.spacing(3)\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\"\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  cardGrid: {\n    marginTop: theme.spacing(4)\n  }\n}));\nexport default function Quest(props) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem(\"quests\")) == null || JSON.parse(localStorage.getItem(\"quests\")) == 0) {\n      window.location.reload();\n    }\n  });\n\n  async function getQuests(e) {\n    //e.preventDefault();\n    let res = await fetch(\"https://localhost:44332/api/Quest\", {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"tok\")\n      }\n    });\n    res = await res.json(); // Установка в localStorage всех данных о квесте в формате массива\n\n    let names = [];\n\n    for (var i in res) {\n      names[i] = res[i];\n    }\n\n    localStorage.setItem(\"quests\", JSON.stringify(names));\n    console.log(localStorage.getItem(\"quests\"));\n  }\n\n  window.location.reload();\n  getQuests();\n  var items = JSON.parse(localStorage.getItem(\"quests\"));\n  const classes = useStyles();\n\n  function setStateQuestId(id) {\n    localStorage.setItem(\"questId\", id);\n    console.log(localStorage.getItem(\"questId\"));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.mainFeaturePost,\n      style: {},\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        fixed: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.mainContent,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          align: \"center\",\n          color: \"textPrimary\",\n          gutterBottom: true,\n          children: \"QuestRoad service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          align: \"center\",\n          color: \"textSecondary\",\n          paragraph: true,\n          children: [\"  \", t(\"quest.title\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          justify: \"center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.cardGrid,\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: JSON.parse(localStorage.getItem(\"quests\")).map(card => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n              className: classes.cardMedia,\n              image: card.photo,\n              title: \"image title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(NavLink, {\n                to: \"/detailedCar\",\n                onClick: () => setStateQuestId(card.quest_id),\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  gutterBottom: true,\n                  children: card.model\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: [t(\"quest.name\"), \": \", card.name, \",\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 72\n                }, this), t(\"quest.city\"), \": \", card.city, \", \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 73\n                }, this), t(\"quest.address\"), \": \", card.adress, \", \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 78\n                }, this), t(\"quest.maxCount\"), \": \", card.max_count_users, \", \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 88\n                }, this), t(\"quest.price\"), \": \", card.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n} //------------------\n// export default function Cars(props) {\n//     const history = useHistory();\n//     const [cars, setCars] = useState([]);\n//     async function getCars(e){\n//         let res = await fetch(\"https://localhost:44312/api/Car\", {\n//             method: 'GET',\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 \"Accept\": \"application/json\",\n//                 \"Authorization\": \"Bearer \"+ localStorage.getItem(\"tok\"),\n//             },\n//         });\n//         setCars();\n//         console.log(cars);\n//         console.log(res);\n//         console.log(res.status);\n//         if(res.status === 200){\n//             //history.push(\"/login\")\n//         }\n//         res = await res.json();\n//         localStorage.setItem(\"cars\", JSON.stringify(res));\n//     }\n//     return (\n//         <table>\n//            <thead>\n//                 <tr>\n//                    <th>Model</th>\n//                     <th>Brand</th>\n//                     <th>Year</th>\n//                     <th>Transmission</th>\n//                     <th>Address</th>\n//                     <th>Type</th>\n//                     <th>Price</th>\n//                     <th>Description</th>\n//                 </tr>\n//             </thead>\n//             <tbody>\n//                 { JSON.parse(localStorage.getItem(\"cars\")).map(item => {\n//                     return (\n//                         <tr>\n//                             <td>{item.model}</td>\n//                             <td>{item.brand}</td>\n//                             <td>{item.year}</td>\n//                             <td>{item.transmission}</td>\n//                             <td>{item.address}</td>\n//                             <td>{item.type}</td>\n//                             <td>{item.price}</td>\n//                             <td>{item.description}</td>\n//                         </tr>\n//                     );\n//                 })}\n//             </tbody>\n//         </table>\n//     );\n// };\n\n_s(Quest, \"v45vTExLtRgY9l/8itZ2tIlHaII=\", false, function () {\n  return [useTranslation, useStyles];\n});\n\n_c = Quest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quest\");","map":{"version":3,"sources":["E:/Универ/3 курс/АТАРК/Front/src/components/Quests/Quest.jsx"],"names":["React","useEffect","useState","NavLink","AppBar","Container","Toolbar","IconButton","Typography","Paper","Box","Grid","Card","CardMedia","CardContent","CardActions","useTranslation","routes","Booking","useHistory","Button","makeStyles","useStyles","theme","title","flexGrow","mainFeaturePost","position","color","palette","common","white","marginBottom","spacing","backgroundSize","backgroundRepeat","backgroundPosition","mainFeaturePostContent","padding","cardMedia","paddingTop","cardContent","cardGrid","marginTop","Quest","props","t","JSON","parse","localStorage","getItem","window","location","reload","getQuests","e","res","fetch","method","headers","json","names","i","setItem","stringify","console","log","items","classes","setStateQuestId","id","mainContent","map","card","photo","quest_id","model","name","city","adress","max_count_users","price"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {AppBar, Container, Toolbar, IconButton, Typography, Paper, Box, Grid, Card, CardMedia, CardContent, CardActions} from '@material-ui/core';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport \"../../utils/i18next\";\r\nimport routes from \"../../utils/i18next\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Booking from \"../OnlineBooking/Booking\";\r\nimport { useHistory } from 'react-router-dom';\r\n// import { Table } from 'reactstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    mainFeaturePost:{\r\n        position: \"relative\",\r\n        color: theme.palette.common.white,\r\n        marginBottom: theme.spacing(4),\r\n\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"center\"\r\n    },\r\n    mainFeaturePostContent:{\r\n        position: \"relative\",\r\n        padding: theme.spacing(3)\r\n    },\r\n    cardMedia:{\r\n        paddingTop:\"56.25%\"\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1\r\n    },\r\n    cardGrid:{\r\n        marginTop: theme.spacing(4)\r\n    }\r\n}))\r\n\r\nexport default function Quest(props) {\r\n    const {t} = useTranslation();\r\n\r\n\r\n    useEffect(() =>{\r\n        if(JSON.parse(localStorage.getItem(\"quests\")) == null || JSON.parse(localStorage.getItem(\"quests\")) == 0){\r\n            window.location.reload();\r\n        }\r\n\r\n    })\r\n    async function getQuests(e){\r\n        //e.preventDefault();\r\n        let res = await fetch(\"https://localhost:44332/api/Quest\", {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": \"Bearer \"+ localStorage.getItem(\"tok\"),\r\n            },\r\n        });\r\n        res = await res.json();\r\n        // Установка в localStorage всех данных о квесте в формате массива\r\n        let names = [];\r\n        for(var i in res ){\r\n            names[i] = res[i];\r\n        }\r\n        localStorage.setItem(\"quests\", JSON.stringify(names));\r\n        console.log(localStorage.getItem(\"quests\"));\r\n    }\r\n    window.location.reload();\r\n    getQuests();\r\n    var items = JSON.parse(localStorage.getItem(\"quests\"));\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    function setStateQuestId(id){\r\n        localStorage.setItem(\"questId\", id);\r\n        console.log(localStorage.getItem(\"questId\"));\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Paper className={classes.mainFeaturePost}\r\n                   style={{ }}>\r\n                <Container fixed>\r\n                    {/* <Grid container>\r\n                        <Grid item md={6}>\r\n                            <div className={classes.mainFeaturePostContent}>\r\n                            <Typography component=\"h1\" variant=\"h3\" color=\"inherit\" gutterBottom>\r\n                             Web Blog\r\n                            </Typography>\r\n                                <Typography component=\"h5\" color=\"inherit\" paragraph>\r\n                                    Web Blogdsadanas\r\n                                    adsadsadasjhdjkasdjas\r\n                                    sadjasjdjasdnjasdasjldna\r\n                                    asljdnajdnsajdnjad. sadkaslkdaskld.\r\n                                </Typography>\r\n                                <Button variant =\"h5\" color=\"second\">\r\n                                    learm more\r\n                                </Button>\r\n                            </div>\r\n\r\n                        </Grid>\r\n                    </Grid> */}\r\n                </Container>\r\n            </Paper>\r\n            <div className={classes.mainContent}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>QuestRoad service</Typography>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>  {t(\"quest.title\")}</Typography>\r\n                    <Grid container spacing={2} justify=\"center\">\r\n                        {/* <Grid item>\r\n                            <Button variant=\"contained\" color=\"primary\">Start Now</Button>\r\n                        </Grid> */}\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    {JSON.parse(localStorage.getItem(\"quests\")).map((card) => (\r\n                        <Grid item key={card} xs={12} sm={6} md={4}>\r\n                            <Card className={classes.card}>\r\n                                <CardMedia\r\n                                    className={classes.cardMedia}\r\n                                    image={card.photo}\r\n                                    title=\"image title\"/>\r\n                                <CardContent className={classes.cardContent}>\r\n                                    <NavLink to=\"/detailedCar\" onClick={ () => setStateQuestId(card.quest_id)}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            {card.model}\r\n                                        </Typography>\r\n                                    </NavLink>\r\n                                    <Typography>\r\n                                        {t(\"quest.name\")}: {card.name},<br/>\r\n                                        {t(\"quest.city\")}: {card.city}, <br/>\r\n                                        {t(\"quest.address\")}: {card.adress}, <br/>\r\n                                        {t(\"quest.maxCount\")}: {card.max_count_users}, <br/>\r\n                                        {t(\"quest.price\")}: {card.price}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                {/* <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\">\r\n                                        View\r\n                                    </Button>\r\n                                    <Button size=\"small\" color=\"primary\">\r\n                                        Edit\r\n                                    </Button>\r\n                                </CardActions> */}\r\n                            </Card>\r\n                        </Grid>\r\n\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//------------------\r\n\r\n// export default function Cars(props) {\r\n//     const history = useHistory();\r\n//     const [cars, setCars] = useState([]);\r\n\r\n//     async function getCars(e){\r\n\r\n\r\n//         let res = await fetch(\"https://localhost:44312/api/Car\", {\r\n//             method: 'GET',\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 \"Accept\": \"application/json\",\r\n//                 \"Authorization\": \"Bearer \"+ localStorage.getItem(\"tok\"),\r\n//             },\r\n//         });\r\n//         setCars();\r\n//         console.log(cars);\r\n//         console.log(res);\r\n//         console.log(res.status);\r\n//         if(res.status === 200){\r\n//             //history.push(\"/login\")\r\n//         }\r\n//         res = await res.json();\r\n//         localStorage.setItem(\"cars\", JSON.stringify(res));\r\n//     }\r\n//     return (\r\n\r\n\r\n//         <table>\r\n//            <thead>\r\n//                 <tr>\r\n//                    <th>Model</th>\r\n//                     <th>Brand</th>\r\n//                     <th>Year</th>\r\n//                     <th>Transmission</th>\r\n//                     <th>Address</th>\r\n//                     <th>Type</th>\r\n//                     <th>Price</th>\r\n//                     <th>Description</th>\r\n//                 </tr>\r\n//             </thead>\r\n//             <tbody>\r\n\r\n//                 { JSON.parse(localStorage.getItem(\"cars\")).map(item => {\r\n//                     return (\r\n\r\n//                         <tr>\r\n//                             <td>{item.model}</td>\r\n//                             <td>{item.brand}</td>\r\n//                             <td>{item.year}</td>\r\n//                             <td>{item.transmission}</td>\r\n//                             <td>{item.address}</td>\r\n//                             <td>{item.type}</td>\r\n//                             <td>{item.price}</td>\r\n//                             <td>{item.description}</td>\r\n//                         </tr>\r\n//                     );\r\n//                 })}\r\n\r\n//             </tbody>\r\n//         </table>\r\n\r\n\r\n//     );\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}